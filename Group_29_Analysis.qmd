---
title: "Analysis of individual earns"
author: "Group 29"
number-sections: true
format:  
  html:
    embed-resources: true
    code-tools: true
    code-overflow: wrap
  pdf: default
editor_options: 
  chunk_output_type: console
execute:
  echo: false
  eval: true
  warning: false
  message: false
output:
  pdf_document:
    keep_tex: false
---

```{r}
#| label: libraries
#| include: false
library(tidyverse)
library(MASS)
library(detectseparation)
library(arm)
library(caret)
library(ggplot2)
library(glmnet)
library(moderndive)
library(gapminder)
library(sjPlot)
library(stats)
library(jtools)
library(janitor)
library(dplyr)
library(GGally)
library(ROCR)
```

```{r}
#| label: data_tidy
#| include: false
data <- read.csv("dataset29.csv", header = TRUE, na.strings = c("?", " ", "","?,"))
data <- data %>%
  mutate(across(where(is.character), ~ gsub(",$", "", trimws(.))),
         Income = factor(Income, levels = c("<=50K", ">50K")),
         across(c(Education, Marital_Status, Occupation, Sex, Nationality), as.factor))
data$Hours_PW <- as.numeric(data$Hours_PW)
#delete NA items
sum(is.na(data))
data <- na.omit(data)
```

# Introduction

**Dataset 29** were collected from the US 1994 Census database. This dataset contain data on individuals regarding their income level, and various socioeconomic factors. You will have access to the following variables:

-   ​**Age** - The age of the individual in years\
-   ​**Education** - Highest education level obtained by the individual\
-   ​**Marital_Status** - The marital status of the individual\
-   ​**Occupation** - The occupation of the individual\
-   ​**Sex** - The sex of the individual\
-   ​**Hours_Pw** - Number of hours worked per week by the individual\
-   ​**Nationality** - The nationality of birth of the individual\
-   ​**Income** - A factor variable with two levels: `>50k` if the individual earns more than \$50k per year, or `<=50k` if the individual earns less than or equal to \$50k per year

------------------------------------------------------------------------

## Task

Imagine you have been tasked by the government to identify which features based on the census data impact the income an individual makes: - Which factors influence whether an individual earns more than \$50k per year?

You should:

1\. Conduct an analysis to answer your question using a ​**Generalised Linear Model (GLM)**\
2. Summarise your results in the form of a presentation

# Exploratory Data Analysis {#sec-EDA}

Summary statistics of **Income** are presented in the following for each column separately.

Observe the correlation of the numeric of data:

```{r}
#| label: fig-Numeric-Data
#| echo: false
#| fig-cap: Numeric Data Correlation 
ggpairs(data[,c("Age","Hours_PW","Income")])
```

## Data levels

```{r}
#| label: data-levels
#| echo: false
levels(data$Education)
levels(data$Marital_Status)
levels(data$Occupation)
levels(data$Sex)
levels((data$Nationality))

dependent_var <- "Income"
independent_vars <- c("Education", "Marital_Status", "Occupation", "Sex", "Nationality")
results <- list()
for (var in independent_vars) {
  contingency_table <- table(data[[var]], data[[dependent_var]])
  chi_test <- chisq.test(contingency_table)
    results[[var]] <- chi_test
}
for (var in names(results)) {
  cat("Chi-square test for", var, "vs ",dependent_var,":\n")
  print(results[[var]])
  cat("\n")
}


```

```{r}
#| label: fig-Income-Distribution
#| echo: false
#| fig-cap: Income Distribution.

ggplot(data, aes(Income)) + 
  geom_bar()
```

## Occupation by Income

```{r}
#| label: tbl-Occupation -Distribution
#| tbl-cap: Occupation Distribution.

data %>%
  tabyl(Income,Occupation ) %>%
  adorn_percentages() %>%
  adorn_pct_formatting() %>%
  adorn_ns()
```

```{r}
#| label: fig-Occupation-Distribution
#| fig-pos: h
#| fig-cap: Occupation Distribution.

ggplot(data, aes(x=Occupation)) + 
    geom_bar() + 
    coord_flip()
```

```{r}
#| label: fig-Income-Occupation
#| fig-pos: h
#| fig-cap: Income by Occupation.
ggplot(data, aes(x = Income, fill = Occupation)) + 
  geom_bar(position = "fill") + 
  labs(x = "Income", y = "Occupation") +
  coord_flip()
ggplot(data=data,aes(x=Income,group=Occupation))+
  geom_bar(aes(y=..prop..,fill=Occupation),stat = "count",position="dodge")+
  labs(x="Whether larger than 50K",y="Proportion")
```

## Education by Income

```{r}
#| label: tbl-Education-Distribution
#| tbl-cap: Education Distribution.

data %>%
  tabyl(Income,Education) %>%
  adorn_percentages() %>%
  adorn_pct_formatting() %>%
  adorn_ns()
```

```{r}
#| label: fig-Education-Distribution
#| fig-pos: h
#| fig-cap: Education Distribution.

ggplot(data, aes(x=Education)) + 
    geom_bar() + 
    coord_flip()
```

```{r}
#| label: fig-Income-Education
#| fig-pos: h
#| fig-cap: Income by Education.
# Income~Education
ggplot(data, aes(x = Income, fill = Education)) + 
  geom_bar(position = "fill") + 
  labs(x = "Income", y = "Education") +
  coord_flip()  
ggplot(data=data,aes(x=Income,group=Education))+
  geom_bar(aes(y=..prop..,fill=Education),stat = "count",position="dodge")+
  labs(x="Whether larger than 50K",y="Proportion")
```

## Martial_Status by Income

```{r}
#| label: tbl-Martial_Status-Distribution
#| tbl-cap: Martial_Status Distribution.

data %>%
  tabyl(Income,Marital_Status) %>%
  adorn_percentages() %>%
  adorn_pct_formatting() %>%
  adorn_ns()
```

```{r}
#| label: fig-Marital_Status-Distribution
#| fig-pos: h
#| fig-cap: Marital_Status Distribution.
ggplot(data, aes(x=Marital_Status)) + 
    geom_bar() + 
    coord_flip()
```

```{r}
#| label: fig-Income-Marital_Status
#| fig-pos: h
#| fig-cap: Income by Marital_Status.
ggplot(data, aes(x = Income, fill = Marital_Status)) + 
  geom_bar(position = "fill") + 
  labs(x = "Income", y = "Marital_Status") +
  coord_flip()  
ggplot(data=data,aes(x=Income,group=Marital_Status))+
  geom_bar(aes(y=..prop..,fill=Marital_Status),stat = "count",position="dodge")+
  labs(x="Whether larger than 50K",y="Proportion")
```

## Sex by Income

```{r}
#| label: tbl-Sex-Distribution
#| tbl-cap: Sex Distribution.

data %>%
  tabyl(Income,Sex) %>%
  adorn_percentages() %>%
  adorn_pct_formatting() %>%
  adorn_ns()
```

```{r}
#| label: fig-Sex-Distribution
#| fig-pos: h
#| fig-cap: Sex Distribution.
ggplot(data, aes(x=Sex)) + 
    geom_bar() + 
    coord_flip()
```

```{r}
#| label: fig-Income-Sex
#| fig-pos: h
#| fig-cap: Income by Sex.

ggplot(data, aes(x = Income, fill = Sex)) + 
  geom_bar(position = "fill") + 
  labs(x = "Income", y = "Sex") +
  coord_flip()  
ggplot(data=data,aes(x=Income,group=Sex))+
  geom_bar(aes(y=..prop..,fill=Sex),stat = "count",position="dodge")+
  labs(x="Whether larger than 50K",y="Proportion")
```

## Nationality by Income

```{r}
#| label: tbl-Nationality-Distribution
#| tbl-cap: Nationality Distribution.

data %>%
  tabyl(Income,Nationality) %>%
  adorn_percentages() %>%
  adorn_pct_formatting() %>%
  adorn_ns()
```

```{r}
#| label: fig-Nationality-Distribution
#| fig-pos: h
#| fig-cap: Nationality Distribution.
ggplot(data, aes(x=Nationality)) + 
    geom_bar() + 
    coord_flip()
```

```{r}
#| label: fig-Income-Nationality
#| fig-pos: h
#| fig-cap: Income by Nationality.
# Income~Education
ggplot(data, aes(x = Income, fill = Nationality)) + 
  geom_bar(position = "fill") + 
  labs(x = "Income", y = "Nationality") +
  coord_flip()  
ggplot(data=data,aes(x=Income,group=Nationality))+
  geom_bar(aes(y=..prop..,fill=Nationality),stat = "count",position="dodge")+
  labs(x="Whether larger than 50K",y="Proportion")
```

## Age by Income

```{r}
#| label: fig-Age-Distribution
#| fig-pos: h
#| fig-cap: Age Distribution.
ggplot(data, aes(x = Age)) +
  geom_histogram(
    bins = 20, 
    fill = "skyblue", 
    color = "white",
    alpha = 0.7
  )
```

```{r}
#| label: fig-Income-Age
#| fig-pos: h
#| fig-cap: Income by Age.
ggplot(data, aes(x = Age, y = Income)) +
  geom_boxplot() +
  labs(x = "Age", y = "Income")
```

## Hours_pw by Income

```{r}
#| label: fig-Hours_PW-Distribution
#| fig-pos: h
#| fig-cap: Hours_PW Distribution.
ggplot(data, aes(x = Hours_PW)) +
  geom_histogram(
    bins = 20, 
    fill = "lightpink", 
    color = "white",
    alpha = 0.7
  )
```

```{r}
#| label: fig-Income-Hours_PW
#| fig-pos: h
#| fig-cap: Income by Hours_PW.
ggplot(data, aes(x = Hours_PW, y = Income)) +
  geom_boxplot() +
  labs(x = "Hours_PW", y = "Income")
```

# Model selection

fitting full model.

```{r}
#| label: glm_full_model
#| echo: false

full_model = glm(Income ~ Age + Education + Sex + Hours_PW + Marital_Status + Occupation  + Nationality, family = binomial(link = "logit"), data = data)

detect_separation_full_model =glm(Income ~ Age + Education + Sex + Hours_PW + Marital_Status + Occupation  + Nationality, family = binomial(link = "logit"), data = data,method='detect_separation')

print(detect_separation_full_model)
summary(full_model)

```

```{r}
#| label: glm_stepAIC_model
#| echo: false

stepAIC_model <- stepAIC(
  full_model,
  direction = "both",   
  trace = FALSE
)
summary(stepAIC_model)
detect_separation_stepAIC_model=glm(formula =Income ~ Age + Education + Hours_PW + Marital_Status + Occupation, family = binomial(link = "logit"), data = data,method='detect_separation')
print(detect_separation_stepAIC_model)

```

### Option choose of model

To resolve the complete separation issue, merge the categories of some explanatory variables.

```{r}
#| label: merge-Education-Marital_Status
data.new <- data

data.new$Education <- as.factor(ifelse(data.new$Education %in% c("1st-4th", "5th-6th", "7th-8th", "9th", "10th", "11th", "12th"), "Low_Education", as.character(data.new$Education)))
data.new$Education <- as.factor(ifelse(data.new$Education %in% c("Assoc-acdm","Assoc-voc","Bachelors","Doctorate","HS-grad","Masters","Prof-school","Some-college"), "High_Education", as.character(data.new$Education)))

data.new$Marital_Status <- as.factor(ifelse(data.new$Marital_Status %in% c( "Separated", "Widowed","Never-married","Divorced"), "Unmarried", as.character(data.new$Marital_Status)))

data.new$Marital_Status <- as.factor(ifelse(data.new$Marital_Status %in% c("Married-spouse-absent","Married-civ-spouse"), "Married", as.character(data.new$Marital_Status)))


```

```{r}
#| label: tbl-Martial_Status-Distribution-new
#| tbl-cap: Martial_Status  Distribution.

data.new %>%
  tabyl(Income,Marital_Status) %>%
  adorn_percentages() %>%
  adorn_pct_formatting() %>%
  adorn_ns()
```

```{r}
#| label: fig-Income-Marital_Status-new
#| fig-pos: h
#| fig-cap: Income by Marital_Status.
ggplot(data=data.new, aes(x = Income, fill = Marital_Status)) + 
  geom_bar(position = "fill") + 
  labs(x = "Income", y = "Marital_Status") +
  coord_flip()  
ggplot(data=data.new,aes(x=Income,group=Marital_Status))+
  geom_bar(aes(y=..prop..,fill=Marital_Status),stat = "count",position="dodge")+
  labs(x="Whether larger than 50K",y="Proportion")
```

```{r}
#| label: tbl-Education-new
#| tbl-cap: Education Distribution.

data.new %>%
  tabyl(Income,Education) %>%
  adorn_percentages() %>%
  adorn_pct_formatting() %>%
  adorn_ns()
```

```{r}
#| label: fig-Income-Education-new
#| fig-pos: h
#| fig-cap: Income by Education.
ggplot(data=data.new, aes(x = Income, fill = Education)) + 
  geom_bar(position = "fill") + 
  labs(x = "Income", y = "Education") +
  coord_flip()  
ggplot(data=data.new,aes(x=Income,group=Education))+
  geom_bar(aes(y=..prop..,fill=Education),stat = "count",position="dodge")+
  labs(x="Whether larger than 50K",y="Proportion")
```

## Combine occupation types (physical labor and mental labor)

```{r}
#| label: merge-Occupation-M-P

data.new.1<-data.new

data.new.1$Occupation <- as.factor(ifelse(data.new.1$Occupation %in% c("Adm-clerical","Exec-managerial","Prof-specialty","Sales","Tech-support","Exec-managerial"), "Mental Labor", as.character(data.new.1$Occupation)))

data.new.1$Occupation <- as.factor(ifelse(data.new.1$Occupation %in% c("Craft-repair","Farming-fishing","Handlers-cleaners","Machine-op-inspct","Transport-moving","Other-service","Priv-house-serv","Protective-serv"), "Physical Labor", as.character(data.new.1$Occupation)))


data.new.1 %>%
  tabyl(Income,Occupation) %>%
  adorn_percentages() %>%
  adorn_pct_formatting() %>%
  adorn_ns()

ggplot(data=data.new.1, aes(x = Income, fill = Occupation)) + 
  geom_bar(position = "fill") + 
  labs(x = "Income", y = "Occupation") +
  coord_flip()  
ggplot(data=data.new.1,aes(x=Income,group=Occupation))+
  geom_bar(aes(y=..prop..,fill=Occupation),stat = "count",position="dodge")+
  labs(x="Whether larger than 50K",y="Proportion")
```

## Combine occupation types (by PRC Job Classification List)

ref:<https://zchweb.oss-cn-beijing.aliyuncs.com/contract/temp/2021122116541363304.pdf>

```{r}
#| label: merge-Occupation-PRC_Job_Classification_List
data.new.2<-data.new

data.new.2$Occupation <- as.factor(ifelse(data.new.2$Occupation %in% c("Exec-managerial"), "1", as.character(data.new.2$Occupation)))

data.new.2$Occupation <- as.factor(ifelse(data.new.2$Occupation %in% c("Prof-specialty","Tech-support"), "2", as.character(data.new.2$Occupation)))

data.new.2$Occupation <- as.factor(ifelse(data.new.2$Occupation %in% c("Adm-clerical"), "3", as.character(data.new.2$Occupation)))

data.new.2$Occupation <- as.factor(ifelse(data.new.2$Occupation %in% c("Sales","Handlers-cleaners","Other-service","Priv-house-serv","Protective-serv"), "4", as.character(data.new.2$Occupation)))

data.new.2$Occupation <- as.factor(ifelse(data.new.2$Occupation %in% c("Farming-fishing"), "5", as.character(data.new.2$Occupation)))

data.new.2$Occupation <- as.factor(ifelse(data.new.2$Occupation %in% c("Craft-repair","Machine-op-inspct","Transport-moving"), "6", as.character(data.new.2$Occupation)))

data.new.2 %>%
  tabyl(Income,Occupation) %>%
  adorn_percentages() %>%
  adorn_pct_formatting() %>%
  adorn_ns()

ggplot(data=data.new.2, aes(x = Income, fill = Occupation)) + 
  geom_bar(position = "fill") + 
  labs(x = "Income", y = "Occupation") +
  coord_flip()  
ggplot(data=data.new.2,aes(x=Income,group=Occupation))+
  geom_bar(aes(y=..prop..,fill=Occupation),stat = "count",position="dodge")+
  labs(x="Whether larger than 50K",y="Proportion")
```

## Combine occupation types (by International Standard Classification of Occupations (ISCO-08))

ref:<https://ilostat.ilo.org/methods/concepts-and-definitions/classification-occupation/>

```{r}
#| label: merge-Occupation-ISCO_08
data.new.3<-data.new

data.new.3$Occupation <- as.factor(ifelse(data.new.3$Occupation %in% c("Exec-managerial"), "1", as.character(data.new.3$Occupation)))

data.new.3$Occupation <- as.factor(ifelse(data.new.3$Occupation %in% c("Prof-specialty"), "2", as.character(data.new.3$Occupation)))

data.new.3$Occupation <- as.factor(ifelse(data.new.3$Occupation %in% c("Tech-support"), "3", as.character(data.new.3$Occupation)))

data.new.3$Occupation <- as.factor(ifelse(data.new.3$Occupation %in% c("Adm-clerical"), "4", as.character(data.new.3$Occupation)))


data.new.3$Occupation <- as.factor(ifelse(data.new.3$Occupation %in% c("Farming-fishing"), "6", as.character(data.new.3$Occupation)))

data.new.3$Occupation <- as.factor(ifelse(data.new.3$Occupation %in% c("Other-service","Priv-house-serv","Protective-serv","Sales"), "5", as.character(data.new.3$Occupation)))

data.new.3$Occupation <- as.factor(ifelse(data.new.3$Occupation %in% c("Farming-fishing"), "6", as.character(data.new.3$Occupation)))

data.new.3$Occupation <- as.factor(ifelse(data.new.3$Occupation %in% c("Craft-repair"), "7", as.character(data.new.3$Occupation)))

data.new.3$Occupation <- as.factor(ifelse(data.new.3$Occupation %in% c("Transport-moving","Machine-op-inspct"), "8", as.character(data.new.3$Occupation)))

data.new.3$Occupation <- as.factor(ifelse(data.new.3$Occupation %in% c("Handlers-cleaners"), "9", as.character(data.new.3$Occupation)))
	

data.new.3 %>%
  tabyl(Income,Occupation) %>%
  adorn_percentages() %>%
  adorn_pct_formatting() %>%
  adorn_ns()

ggplot(data=data.new.3, aes(x = Income, fill = Occupation)) + 
  geom_bar(position = "fill") + 
  labs(x = "Income", y = "Occupation") +
  coord_flip()  
ggplot(data=data.new.3,aes(x=Income,group=Occupation))+
  geom_bar(aes(y=..prop..,fill=Occupation),stat = "count",position="dodge")+
  labs(x="Whether larger than 50K",y="Proportion")
```

```{r}
model_full_new.1 <-glm(Income ~ Age +Education + Sex + Hours_PW + Marital_Status + Occupation  + Nationality, family = binomial(link = "logit"),data = data.new.1)

stepAIC_model_new.1 <- stepAIC(
  model_full_new.1,
  direction = "both",   
  trace = FALSE
)
summary(stepAIC_model_new.1)

detect_separation_model <- glm(Income ~ Age + Education +Sex+ Marital_Status +Occupation+ Hours_PW,data = data.new.1, family = binomial(link="logit"),method='detect_separation')
print(detect_separation_model)

model_full_new.2 <-glm(Income ~ Age +Education + Sex + Hours_PW + Marital_Status + Occupation  + Nationality, family = binomial(link = "logit"),data = data.new.2)

stepAIC_model_new.2 <- stepAIC(
  model_full_new.2,
  direction = "both",   
  trace = FALSE
)
summary(stepAIC_model_new.2)

detect_separation_model <- glm(Income ~ Age + Education +Sex+ Marital_Status +Occupation+ Hours_PW,data = data.new.2, family = binomial(link="logit"),method='detect_separation')
print(detect_separation_model)


model_full_new.3 <-glm(Income ~ Age +Education + Sex + Hours_PW + Marital_Status + Occupation  + Nationality, family = binomial(link = "logit"),data = data.new.3)

stepAIC_model_new.3 <- stepAIC(
  model_full_new.3,
  direction = "both",   
  trace = FALSE
)
summary(stepAIC_model_new.3)

detect_separation_model <- glm(Income ~ Age + Education +Sex+ Marital_Status +Occupation+ Hours_PW,data = data.new.3, family = binomial(link="logit"),method='detect_separation')
print(detect_separation_model)


```

# Model Check

```{r}

plot_model(stepAIC_model, show.values = TRUE,
           title = "", show.p = FALSE, value.offset = 0.5)

plot_model(stepAIC_model_new.1, show.values = TRUE,
           title = "", show.p = FALSE, value.offset = 0.5)
plot_model(stepAIC_model_new.2, show.values = TRUE,
           title = "", show.p = FALSE, value.offset = 0.5)
plot_model(stepAIC_model_new.3, show.values = TRUE,
           title = "", show.p = FALSE, value.offset = 0.5)
```

```{r}
plot_roc_curve <- function(model, datatest) {
  predicted <- predict(model, newdata = datatest, type = "response")
  predicted_class <- ifelse(predicted >= 0.5, ">50k", "<=50k")
  score <- ROCR::prediction(predicted, datatest$Income)
  perf <- ROCR::performance(score, "tpr", "fpr")
  auc <- ROCR::performance(score, "auc")
  perfd <- data.frame(
    x = perf@x.values[[1]],
    y = perf@y.values[[1]]
  )
  ggplot2::ggplot(perfd, aes(x = x, y = y)) +
    ggplot2::geom_line() +
    ggplot2::xlab("False positive rate") +
    ggplot2::ylab("True positive rate") +
    ggplot2::ggtitle(paste("Area under the curve:", round(auc@y.values[[1]], 3)))
}
```

```{r}
plot_roc_curve(stepAIC_model,data)
qchisq(0.95,df=1374)
plot_roc_curve(stepAIC_model_new.1,data.new.1)
plot_roc_curve(stepAIC_model_new.2,data.new.2)
plot_roc_curve(stepAIC_model_new.3,data.new.3)

anova_result <- anova(stepAIC_model_new.1)
print(anova_result)
anova_result <- anova(stepAIC_model_new.2)
print(anova_result)
anova_result <- anova(stepAIC_model_new.3)
print(anova_result)
```

## Consider the interaction effects

```{r}
model_full_new.1.interaction <-glm(Income ~ (Age +Education + Sex + Hours_PW + Marital_Status + Occupation)^2  + Nationality, family = binomial(link = "logit"),data = data.new.1)

stepAIC_model_new.1.interaction <- stepAIC(
  model_full_new.1.interaction,
  direction = "both",   
  trace = FALSE
)
summary(stepAIC_model_new.1.interaction)
#Remove insignificant items 
model_new.1.interaction=glm(Income ~ Age + Education  + Sex + Hours_PW + Marital_Status + 
    Occupation + Age:Marital_Status + Sex:Marital_Status ,data = data.new.1, family = binomial(link="logit"))
summary(model_new.1.interaction)

detect_separation_model <- glm(Income ~ Age + Education + Sex + Hours_PW + Marital_Status + 
    Occupation + Age:Marital_Status + Sex:Marital_Status ,data = data.new.1, family = binomial(link="logit"),method='detect_separation')
print(detect_separation_model)

plot_roc_curve(model_new.1.interaction,data.new.1)
```

```{r}
model_full_new.2.interaction <-glm(Income ~ (Age +Education + Sex + Hours_PW + Marital_Status + Occupation)^2  + Nationality, family = binomial(link = "logit"),data = data.new.2)

stepAIC_model_new.2.interaction <- stepAIC(
  model_full_new.2.interaction,
  direction = "both",   
  trace = FALSE
)
summary(stepAIC_model_new.2.interaction)
#Remove insignificant items 
model_new.2.interaction=glm(formula = Income ~ Age + Education + Sex + Hours_PW + Marital_Status + 
    Occupation + Age:Marital_Status  + Education:Hours_PW + 
    Sex:Marital_Status + Sex:Occupation , 
    family = binomial(link = "logit"), data = data.new.2)
summary(model_new.2.interaction)

detect_separation_model <- glm(formula = Income ~ Age + Education + Sex + Hours_PW + Marital_Status + 
    Occupation + Age:Marital_Status  + Education:Hours_PW + 
    Sex:Marital_Status + Sex:Occupation , 
    family = binomial(link = "logit"), data = data.new.2,method='detect_separation')
print(detect_separation_model)

plot_roc_curve(model_new.2.interaction,data.new.2)
```

```{r}

model_full_new.3.interaction <-glm(Income ~ (Age +Education + Sex + Hours_PW + Marital_Status + Occupation)^2  + Nationality, family = binomial(link = "logit"),data = data.new.3)

stepAIC_model_new.3.interaction <- stepAIC(
  model_full_new.3.interaction,
  direction = "both",   
  trace = FALSE
)
summary(stepAIC_model_new.3.interaction)
#Remove insignificant items 
model_new.3.interaction=glm(formula = Income ~ Age + Sex + Education + Hours_PW + Marital_Status + 
    Occupation   + Marital_Status:Occupation, 
    family = binomial(link = "logit"), data = data.new.3)
summary(model_new.3.interaction)

detect_separation_model <- glm(formula = Income ~ Age + Sex+ Education + Hours_PW + Marital_Status + 
    Occupation   + Marital_Status:Occupation, 
    family = binomial(link = "logit"), data = data.new.3,method='detect_separation')
print(detect_separation_model)

plot_roc_curve(model_new.3.interaction,data.new.3)
```

# Model Assumption

The Hosmer-Lemeshow test p-values for all seven models are greater than 0.05, indicating a good model fit. The predicted probabilities do not show a significant difference from the actual data distribution, confirming that the models are suitable for use.

```{r}
install.packages("ResourceSelection")
library(ResourceSelection)
hl_test_model <- hoslem.test(stepAIC_model$y, fitted(stepAIC_model), g = 10)
hl_test_model_new.1<-hoslem.test(stepAIC_model_new.1$y, fitted(stepAIC_model_new.1), g = 10)
hl_test_model_new.2<-hoslem.test(stepAIC_model_new.2$y, fitted(stepAIC_model_new.2), g = 10)
hl_test_model_new.3<-hoslem.test(stepAIC_model_new.3$y, fitted(stepAIC_model_new.3), g = 10)
hl_test_model_new.1.interaction<-hoslem.test(model_new.1.interaction$y, fitted(model_new.1.interaction), g = 10)
hl_test_model_new.2.interaction<-hoslem.test(model_new.2.interaction$y, fitted(model_new.2.interaction), g = 10)
hl_test_model_new.3.interaction<-hoslem.test(model_new.3.interaction$y, fitted(model_new.3.interaction), g = 10)

print(hl_test_model)
print(hl_test_model_new.1)
print(hl_test_model_new.2)
print(hl_test_model_new.3)
print(hl_test_model_new.1.interaction)
print(hl_test_model_new.2.interaction)
print(hl_test_model_new.3.interaction)

```

When evaluating the prediction accuracy of the seven models, all models achieved an accuracy greater than 0.8, with a difference of no more than 0.02 between them. This indicates that the models can effectively distinguish between high-income (\>50K) and low-income (\<=50K) groups.

```{r}
pred_prob1 <- predict(stepAIC_model, type = "response")
pred_class1 <- ifelse(pred_prob1 >= 0.5, ">50K", "<=50K")
confusion_matrix1 <- table(Predicted = pred_class1, Actual = data$Income)
print(confusion_matrix1)
accuracy1 <- sum(diag(confusion_matrix1)) / sum(confusion_matrix1)
print(paste("Accuracy1:", round(accuracy1, 3)))
#0.829
```

```{r}
pred_prob2 <- predict(stepAIC_model_new.1, type = "response")
pred_class2 <- ifelse(pred_prob2 >= 0.5, ">50K", "<=50K")
confusion_matrix2 <- table(Predicted = pred_class2, Actual = data.new.1$Income)
print(confusion_matrix2)
accuracy2 <- sum(diag(confusion_matrix2)) / sum(confusion_matrix2)
print(paste("Accuracy2:", round(accuracy2, 3)))
#0.809
```

```{r}
pred_prob3 <- predict(stepAIC_model_new.2, type = "response")
pred_class3 <- ifelse(pred_prob3 >= 0.5, ">50K", "<=50K")
confusion_matrix3 <- table(Predicted = pred_class3, Actual = data.new.2$Income)
print(confusion_matrix3)
accuracy3 <- sum(diag(confusion_matrix3)) / sum(confusion_matrix3)
print(paste("Accuracy3:", round(accuracy3, 3)))
#0.82
```

```{r}
pred_prob4 <- predict(stepAIC_model_new.3, type = "response")
pred_class4 <- ifelse(pred_prob4 >= 0.5, ">50K", "<=50K")
confusion_matrix4 <- table(Predicted = pred_class4, Actual = data.new.3$Income)
print(confusion_matrix4)
accuracy4 <- sum(diag(confusion_matrix4)) / sum(confusion_matrix4)
print(paste("Accuracy4:", round(accuracy4, 3)))
#0.823
```

```{r}
pred_prob5 <- predict(model_new.1.interaction, type = "response")
pred_class5 <- ifelse(pred_prob5 >= 0.5, ">50K", "<=50K")
confusion_matrix5 <- table(Predicted = pred_class5, Actual = data.new.1$Income)
print(confusion_matrix5)
accuracy5 <- sum(diag(confusion_matrix5)) / sum(confusion_matrix5)
print(paste("Accuracy5:", round(accuracy5, 3)))
#0.817
```

```{r}
pred_prob6 <- predict(model_new.2.interaction, type = "response")
pred_class6 <- ifelse(pred_prob6 >= 0.5, ">50K", "<=50K")
confusion_matrix6 <- table(Predicted = pred_class6, Actual = data.new.2$Income)
print(confusion_matrix6)
accuracy6 <- sum(diag(confusion_matrix6)) / sum(confusion_matrix6)
print(paste("Accuracy6:", round(accuracy6, 3)))
#0.825
```

```{r}
pred_prob7 <- predict(model_new.3.interaction, type = "response")
pred_class7 <- ifelse(pred_prob7 >= 0.5, ">50K", "<=50K")
confusion_matrix7 <- table(Predicted = pred_class7, Actual = data.new.3$Income)
print(confusion_matrix7)
accuracy7 <- sum(diag(confusion_matrix7)) / sum(confusion_matrix7)
print(paste("Accuracy7:", round(accuracy7, 3)))
#0.816
```

The AIC of `model_new.2.interaction` is the smallest, indicating the best model fit. Additionally, `model_new.2.interaction` achieves the highest AUC of 0.869, demonstrating the strongest ability to classify high-income (\>50K) and low-income (\<=50K) groups.

```{r}
AIC(stepAIC_model, stepAIC_model_new.1,stepAIC_model_new.2,stepAIC_model_new.3,model_new.1.interaction,model_new.2.interaction,model_new.3.interaction)

```

The X-axis (0 → 1) represents the predicted probability, where 0 indicates low income, 1 indicates high income, and 0.5 represents model uncertainty. The Y-axis (residuals) represents the prediction error. A residual value close to 0 indicates that the predicted result is close to the actual value, with a small error, while a residual value far from 0 indicates a larger discrepancy between the predicted and actual values.\
At points where the X-axis is close to 0 and 1, residual values are larger, indicating higher prediction errors in these regions. However, this is a normal phenomenon in logistic regression. When the X-axis is near 0.5, the residual values are smaller, suggesting that the model fits better in the middle probability range.

```{r}
fitted_values <- fitted(model_new.2.interaction)
plot(fitted_values, residuals_dev, 
     main = "Residuals vs Fitted Values", 
     xlab = "Fitted Values", 
     ylab = "Residuals", 
     col = "blue", pch = 20)

abline(h = 0, col = "red", lwd = 2, lty = 2)

```

The residuals follow a normal distribution in the middle region but deviate from the diagonal line at both ends, especially on the right side. However, slight tail deviations are common in logistic regression.

```{r}
std_residuals <- stdres(model_new.2.interaction)

qqnorm(std_residuals, 
       main = "QQ Plot of Standardized Residuals", 
       col = "blue", pch = 20)
qqline(std_residuals, col = "red", lwd = 2)  

```
